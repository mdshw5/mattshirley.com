import os
import json
import hamstring
import datetime
import pylibmc
import monitor
from flask import Flask, request, session, g, redirect, url_for, abort, \
     render_template, flash, send_from_directory, Markup
from flask.ext.gravatar import Gravatar
from werkzeug.contrib.atom import AtomFeed
from app import app
from models import render_markdown, post_date, HamstringValidate, MethylDecode, decodeASCII, \
    MethylEncode, encodeASCII, refresh_postlisting, make_external, ncbi_epi, get_git_repos, orcid_to_markdown, \
    scrape_scical

# configuration
ROOT = '/home/matt/microblog/'
gravatar = Gravatar(app,
                    size=100,
                    rating='g',
                    default='retro',
                    force_default=False,
                    force_lower=False)

@app.before_request
def remove_trailing_slash():
    if request.path != '/' and request.path.endswith('/'):
        return redirect(request.path[:-1])

@app.route('/robots.txt')
@app.route('/sitemap.xml')
def static_from_root():
    return send_from_directory(app.static_folder, request.path[1:])

@app.route('/recent.atom')
def recent_feed():
    feed = AtomFeed('Recent Articles',
                    feed_url=request.url, url=request.url_root)
    with open(os.path.join(ROOT, 'postlisting'), 'r') as i:
        articles = json.load(i)
        articles = sorted(articles.items(), reverse=True)
        articles = articles[:10]
    for article in articles:
        feed.add(article[1], unicode(render_markdown(ROOT + 'posts/{0}.{1}'.format(article[1], 'md'), 
                                                     header=True)),
                 content_type='html',
                 author='Matt Shirley',
                 url=make_external('http://mattshirley.com/'+article[1]),
                 updated=datetime.datetime.strptime(article[0].replace('-','') + '000000', "%Y%m%d%H%M%S"),
                 published=datetime.datetime.strptime(article[0].replace('-','') + '000000', "%Y%m%d%H%M%S"))
    return feed.get_response()

@app.route('/scical')
def return_scical():
    cal = scrape_scical()
    return cal

@app.context_processor
def query_git_repos():
    return dict(get_git_repos=get_git_repos)

@app.context_processor
def utility_processor():
    return(dict(render_markdown=render_markdown))

@app.route('/<postname>')
def display_post(postname):
    content = render_markdown(ROOT + 'posts/{0}.{1}'.format(postname, 'md'), header=True)
    if content is not False:
        return render_template('markdown.html', **locals())
    elif content is False:
        return render_template('500.html'), 500

@app.route('/update-entries')
def update_entries():
    success = refresh_postlisting()
    return str(success)

@app.route('/update-citations')
def update_citations():
    success = orcid_to_markdown('0000-0003-0855-9274')
    return str(success)

@app.route('/')
def show_entries():
    with open(os.path.join(ROOT, 'postlisting'), 'r') as i:
        entries = json.load(i)
        entries = sorted(entries.items(), reverse=True)
        return render_template('show_entries.html', entries=entries)

@app.route('/about')
def about():
    content = render_markdown(ROOT + 'microblog/static/md/about.md') + render_markdown(ROOT + 'microblog/static/md/talks.md') + render_markdown(ROOT + 'microblog/static/md/posters.md')
    serif = True
    return render_template('markdown.html', **locals())

@app.route('/presentations')
def presentations():
    return redirect(url_for('talks'))

@app.route('/talks')
def talks():
    content = render_markdown(ROOT + 'microblog/static/md/talks.md')
    return render_template('markdown.html', **locals())

@app.route('/posters')
def posters():
    content = render_markdown(ROOT + 'microblog/static/md/posters.md')
    return render_template('markdown.html', **locals())

@app.route('/uploads/<year>/<month>/<filename>')
def uploads(year, month, filename):
    dirpath = os.path.join(ROOT + 'uploads',year,month)
    print dirpath
    return send_from_directory(dirpath, filename)

@app.route('/hamstring-validate', methods=['GET', 'POST'])
def validate():
    form = HamstringValidate(request.form)
    if request.method == 'POST' and form.validate():
        barcode = form.barcode.data
        content = hamstring.decodeHamming(barcode, 3)
        flash(Markup('<p>Sequence: {0}</p><p>Checksum: {1}</p>'.format(content.get('nucleotide'), 
                                                   content.get('chksum'))))
        return render_template('hamstring-validate.html', form=form)
    return render_template('hamstring-validate.html', form=form)

@app.route('/methyldecode', methods=['GET', 'POST'])
def methyldecode():
    form = MethylDecode(request.form)
    if request.method == 'POST' and form.validate():
        string = form.string.data
        length = form.length.data
        if length == '':
            length = len(string*2)
        content = decodeASCII(string, length)
        flash(Markup("<pre style='border:0px;background-color:transparent'>" + 
                     content + "<br>C/c = deaminated (converted) cytosine on self/complement strand" +
                     "<br>M = methylated cytosine on top/bottom strand" +
                     "</pre>"))
        return render_template('methyldecode.html', form=form)
    return render_template('methyldecode.html', form=form)

@app.route('/methylencode', methods=['GET', 'POST'])
def methylencode():
    form = MethylEncode(request.form)
    if request.method == 'POST' and form.validate():
        string = form.string.data
        content = encodeASCII(string)
        flash(Markup("<pre style='border:0px;background-color:transparent'>" + 
                     content + 
                     "</pre>"))
        return render_template('methylencode.html', form=form)
    return render_template('methylencode.html', form=form)
    
@app.route('/epi_galaxy', methods=['GET', 'POST'])
def epi_galaxy():
    form = ncbi_epi(request.form, GALAXY_URL = request.args.get('GALAXY_URL'),
                                  tool_id = request.args.get('tool_id'),
                                  sendToGalaxy = request.args.get('sendToGalaxy')
                                  )
    if request.method == 'POST':
        GALAXY_URL = form.GALAXY_URL.data
        tool_id = form.tool_id.data
        ids = form.ids.data
        returnURL = "{0}?tool_id={1}&URL=http://www.ncbi.nlm.nih.gov/projects/genome/galaxy/beFileInfo4Galaxy.cgi?id={2}".format(GALAXY_URL,                                                                                                                                               tool_id,                                                                                                                                               ids)
        return redirect(returnURL)
    return render_template('epi_galaxy.html', form=form)
    
@app.route('/reload')
def reload():
    """ Monitor for changes to site code and restart wsgi process if necessary """
    monitor.start(interval=1.0)
    return redirect(url_for('show_entries'))

@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404

@app.errorhandler(500)
def page_not_found(e):
    return render_template('500.html'), 500
